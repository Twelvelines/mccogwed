// This is a model automatically generated by GenDinCrypt with N = 3

// Number of cryptographers:
N=3;

// Now we declare all the states. Let's start from the simple empty initial states
S0 = (EEEE,EEEE,EEEE);

// In the following step we generate all possible initial states
S1 = (TTYE,TTNE,TTNE);
S2 = (TTYV,TTNV,TTNV);
S3 = (TTNE,TTYE,TTNE);
S4 = (TTNV,TTYV,TTNV);
S5 = (TTNE,TTNE,TTYE);
S6 = (TTNV,TTNV,TTYV);
S7 = (TTNE,TTNE,TTNE);
S8 = (TTNV,TTNV,TTNV);
S9 = (HTYE,THNE,TTNE);
S10 = (HTYO,THNO,TTNO);
S11 = (HTNE,THYE,TTNE);
S12 = (HTNO,THYO,TTNO);
S13 = (HTNE,THNE,TTYE);
S14 = (HTNV,THNV,TTYV);
S15 = (HTNE,THNE,TTNE);
S16 = (HTNV,THNV,TTNV);
S17 = (TTYE,HTNE,THNE);
S18 = (TTYV,HTNV,THNV);
S19 = (TTNE,HTYE,THNE);
S20 = (TTNO,HTYO,THNO);
S21 = (TTNE,HTNE,THYE);
S22 = (TTNO,HTNO,THYO);
S23 = (TTNE,HTNE,THNE);
S24 = (TTNV,HTNV,THNV);
S25 = (HTYE,HHNE,THNE);
S26 = (HTYO,HHNO,THNO);
S27 = (HTNE,HHYE,THNE);
S28 = (HTNV,HHYV,THNV);
S29 = (HTNE,HHNE,THYE);
S30 = (HTNO,HHNO,THYO);
S31 = (HTNE,HHNE,THNE);
S32 = (HTNV,HHNV,THNV);
S33 = (THYE,TTNE,HTNE);
S34 = (THYO,TTNO,HTNO);
S35 = (THNE,TTYE,HTNE);
S36 = (THNV,TTYV,HTNV);
S37 = (THNE,TTNE,HTYE);
S38 = (THNO,TTNO,HTYO);
S39 = (THNE,TTNE,HTNE);
S40 = (THNV,TTNV,HTNV);
S41 = (HHYE,THNE,HTNE);
S42 = (HHYV,THNV,HTNV);
S43 = (HHNE,THYE,HTNE);
S44 = (HHNO,THYO,HTNO);
S45 = (HHNE,THNE,HTYE);
S46 = (HHNO,THNO,HTYO);
S47 = (HHNE,THNE,HTNE);
S48 = (HHNV,THNV,HTNV);
S49 = (THYE,HTNE,HHNE);
S50 = (THYO,HTNO,HHNO);
S51 = (THNE,HTYE,HHNE);
S52 = (THNO,HTYO,HHNO);
S53 = (THNE,HTNE,HHYE);
S54 = (THNV,HTNV,HHYV);
S55 = (THNE,HTNE,HHNE);
S56 = (THNV,HTNV,HHNV);
S57 = (HHYE,HHNE,HHNE);
S58 = (HHYV,HHNV,HHNV);
S59 = (HHNE,HHYE,HHNE);
S60 = (HHNV,HHYV,HHNV);
S61 = (HHNE,HHNE,HHYE);
S62 = (HHNV,HHNV,HHYV);
S63 = (HHNE,HHNE,HHNE);
S64 = (HHNV,HHNV,HHNV);
RT = { (S0,S1),(S1,S2),(S2,S2),(S0,S3),(S3,S4),(S4,S4),(S0,S5),(S5,S6),(S6,S6),(S0,S7),(S7,S8),(S8,S8),(S0,S9),(S9,S10),(S10,S10),(S0,S11),(S11,S12),(S12,S12),(S0,S13),(S13,S14),(S14,S14),(S0,S15),(S15,S16),(S16,S16),(S0,S17),(S17,S18),(S18,S18),(S0,S19),(S19,S20),(S20,S20),(S0,S21),(S21,S22),(S22,S22),(S0,S23),(S23,S24),(S24,S24),(S0,S25),(S25,S26),(S26,S26),(S0,S27),(S27,S28),(S28,S28),(S0,S29),(S29,S30),(S30,S30),(S0,S31),(S31,S32),(S32,S32),(S0,S33),(S33,S34),(S34,S34),(S0,S35),(S35,S36),(S36,S36),(S0,S37),(S37,S38),(S38,S38),(S0,S39),(S39,S40),(S40,S40),(S0,S41),(S41,S42),(S42,S42),(S0,S43),(S43,S44),(S44,S44),(S0,S45),(S45,S46),(S46,S46),(S0,S47),(S47,S48),(S48,S48),(S0,S49),(S49,S50),(S50,S50),(S0,S51),(S51,S52),(S52,S52),(S0,S53),(S53,S54),(S54,S54),(S0,S55),(S55,S56),(S56,S56),(S0,S57),(S57,S58),(S58,S58),(S0,S59),(S59,S60),(S60,S60),(S0,S61),(S61,S62),(S62,S62),(S0,S63),(S63,S64),(S64,S64) };
crypt_1_paid = { S1,S2,S9,S10,S17,S18,S25,S26,S33,S34,S41,S42,S49,S50,S57,S58 };
crypt_2_paid = { S3,S4,S11,S12,S19,S20,S27,S28,S35,S36,S43,S44,S51,S52,S59,S60 };
crypt_3_paid = { S5,S6,S13,S14,S21,S22,S29,S30,S37,S38,S45,S46,S53,S54,S61,S62 };
company_paid = { S7,S8,S15,S16,S23,S24,S31,S32,S39,S40,S47,S48,S55,S56,S63,S64 };
odd = { S10,S12,S20,S22,S26,S30,S34,S38,S44,S46,S50,S52 };
even = { S2,S4,S6,S8,S14,S16,S18,S24,S28,S32,S36,S40,S42,S48,S54,S56,S58,S60,S62,S64 };
